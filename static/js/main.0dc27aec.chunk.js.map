{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","colorArray","App","useState","isCross","setIsCross","winMessage","setWinMessage","cardColor","setCardColor","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","style","color","Button","block","onClick","colorCode","Math","floor","random","map","item","index","Card","background","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc27aec.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\r\n\r\nconst Icon = ({ name }) => {\r\n  switch (name) {\r\n    case \"circle\":\r\n      return <FaRegCircle className=\"icon\" />;\r\n    case \"cross\":\r\n      return <FaTimes className=\"icon\" />;\r\n    default:\r\n      return <FaPen className=\"icon\" />;\r\n  }\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState } from \"react\";\nimport Icon from \"./components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\nconst colorArray = [\n  \"#8D3DAF\",\n  \"#E07C24\",\n  \"#E03B8B\",\n  \"#FF6666\",\n  \"#5A20CB\",\n  \"#383CC1\",\n  \"#CAD5E2\",\n  \"#35BDD0\",\n  \"#E8BD0D\",\n  \"#4DD637\",\n];\n\nfunction App() {\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n  const [cardColor, setCardColor] = useState(\"#35BDD0\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\");\n    const colorCode = Math.floor(Math.random() * 10);\n    setCardColor(colorArray[colorCode]);\n  };\n\n  const checkIsWinner = () => {\n    //checking winner of the game\n    if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[1] &&\n      itemArray[1] === itemArray[2]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setWinMessage(`${itemArray[3]} won`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setWinMessage(`${itemArray[1]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[4] &&\n      itemArray[4] === itemArray[2]\n    ) {\n      setWinMessage(`${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[1] !== \"empty\" &&\n      itemArray[2] !== \"empty\" &&\n      itemArray[3] !== \"empty\" &&\n      itemArray[4] !== \"empty\" &&\n      itemArray[5] !== \"empty\" &&\n      itemArray[6] !== \"empty\" &&\n      itemArray[7] !== \"empty\" &&\n      itemArray[8] !== \"empty\"\n    ) {\n      setWinMessage(\"No Winner\");\n    }\n  };\n\n  const changeItem = (itemNumber) => {\n    if (winMessage) {\n      return toast(\"Game Over\", { type: \"success\" });\n    }\n\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    } else {\n      return toast(\"already filled\", { type: \"error\" });\n    }\n\n    checkIsWinner();\n  };\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mt-2 mb-2\">\n              <h1\n                style={{ color: cardColor }}\n                className=\"text-uppercase text-center \"\n              >\n                {winMessage}\n              </h1>\n              <Button color=\"success\" block onClick={reloadGame}>\n                Reload The Game\n              </Button>\n            </div>\n          ) : (\n            <h1 className=\"text-center text-uppercase text-warning\">\n              {isCross ? \"cross\" : \"circle\"} turn\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card\n                className=\"card\"\n                style={{ background: cardColor }}\n                onClick={() => changeItem(index)}\n              >\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}